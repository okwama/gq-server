generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String
}

model users {
  id           Int         @id @default(autoincrement())
  username     String      @db.VarChar(100)
  department   Int
  password     String      @db.VarChar(100)
  account_code String      @db.VarChar(32)
  firstname    String?     @db.VarChar(255)
  lastname     String?     @db.VarChar(255)
  facebook_id  String?     @db.VarChar(255)
  address      String?     @db.VarChar(255)
  email        String?     @db.VarChar(255)
  phone        String      @db.VarChar(32)
  gender       String      @db.VarChar(32)
  country      String      @db.VarChar(99)
  image        String      @db.VarChar(999)
  created      DateTime?   @db.DateTime(0)
  modified     DateTime?   @db.DateTime(0)
  status       Boolean?    @default(true)
  Expenses     Expenses[]
  documents    documents[]
  Task         Task[]
}

model documents {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(100)
  description String   @db.Text
  category_id Int
  file_path   String   @db.VarChar(255)
  uploaded_by Int
  created_at  DateTime @default(now()) @db.Timestamp(0)
  updated_at  String   @db.VarChar(100)
  users       users    @relation(fields: [uploaded_by], references: [id], onUpdate: Restrict, map: "documents_ibfk_1")

  @@index([uploaded_by], map: "uploaded_by")
}

model Expenses {
  id              Int        @id @default(autoincrement())
  expense_type_id Int
  reference       String     @db.VarChar(50)
  amount          Decimal    @db.Decimal(10, 2)
  paid            Decimal    @db.Decimal(11, 2)
  balance         Decimal    @db.Decimal(11, 2)
  expense_date    DateTime   @db.Date
  posted_by       Int
  notes           String?    @db.Text
  posted_at       DateTime   @default(now()) @db.Timestamp(0)
  MyAccounts      MyAccounts @relation(fields: [expense_type_id], references: [id], onUpdate: Restrict, map: "Expenses_ibfk_1")
  users           users      @relation(fields: [posted_by], references: [id], onUpdate: Restrict, map: "Expenses_ibfk_2")

  @@index([expense_type_id], map: "expense_type_id")
  @@index([posted_by], map: "posted_by")
}

model MyAccounts {
  id             Int        @id @default(autoincrement())
  account_name   String     @db.VarChar(100)
  account_number String     @db.VarChar(20)
  account_type   Int
  description    String?    @db.Text
  created_at     DateTime   @default(now()) @db.Timestamp(0)
  Expenses       Expenses[]
}

model SalesRep {
  id                   Int                  @id @default(autoincrement())
  name                 String
  email                String               @unique
  phoneNumber          String               @unique
  password             String
  countryId            Int
  country              String
  region_id            Int
  region               String
  route_id             Int
  route                String               @db.VarChar(100)
  route_id_update      Int
  route_name_update    String               @db.VarChar(100)
  visits_targets       Int
  new_clients          Int
  role                 String?              @default("SALES_REP")
  manager_type         Int
  status               Int?                 @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  retail_manager       Int
  key_channel_manager  Int
  distribution_manager Int
  photoUrl             String?              @default("")
  managerId            Int?
  countryRelation      Country              @relation(fields: [countryId], references: [id])
  productReturnItems   ProductReturnItem[]
  productsSamples      ProductsSample[]
  productsSampleItems  ProductsSampleItem[]
  reports              Report[]
  targets              Target[]
  tokens               Token[]
  UpliftSale           UpliftSale[]
  visibilityReports    VisibilityReport[]
  leaves               Leave[]
  Manager              Manager?             @relation(fields: [managerId], references: [id])

  Task          Task[]
  ProductReturn ProductReturn[]

  @@index([countryId], map: "SalesRep_countryId_fkey")
}

model LoginHistory {
  id           Int       @id @default(autoincrement())
  userId       Int
  loginAt      DateTime  @default(now())
  logoutAt     DateTime?
  isLate       Boolean?  @default(false)
  isEarly      Boolean?  @default(false)
  timezone     String?   @default("UTC")
  shiftStart   DateTime?
  shiftEnd     DateTime?
  duration     Int?
  status       String?   @default("ACTIVE")
  sessionEnd   String?
  sessionStart String?

  @@index([userId])
  @@index([loginAt])
  @@index([logoutAt])
}

model Target {
  id            Int        @id @default(autoincrement())
  salesRepId    Int
  isCurrent     Boolean    @default(false)
  targetValue   Int
  achievedValue Int        @default(0)
  achieved      Boolean    @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  SalesRep      SalesRep[]

  @@index([salesRepId], map: "Target_salesRepId_fkey")
}

model Leave {
  id         Int      @id @default(autoincrement())
  userId     Int
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  attachment String?
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       SalesRep @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "leaves_userId_fkey")
  @@map("leaves")
}

model Manager {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique
  department String?
  SalesRep   SalesRep[]

  @@map("managers")
}

model UpliftSale {
  id          Int              @id @default(autoincrement())
  clientId    Int
  userId      Int
  status      String           @default("pending")
  totalAmount Float            @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  client      Clients          @relation(fields: [clientId], references: [id])
  user        SalesRep         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  items       UpliftSaleItem[]

  @@index([clientId], map: "UpliftSale_clientId_fkey")
  @@index([userId], map: "UpliftSale_userId_fkey")
}

model UpliftSaleItem {
  id           Int        @id @default(autoincrement())
  upliftSaleId Int
  productId    Int
  quantity     Int
  unitPrice    Float
  total        Float
  createdAt    DateTime   @default(now())
  product      Product    @relation(fields: [productId], references: [id])
  upliftSale   UpliftSale @relation(fields: [upliftSaleId], references: [id])

  @@index([productId], map: "UpliftSaleItem_productId_fkey")
  @@index([upliftSaleId], map: "UpliftSaleItem_upliftSaleId_fkey")
}

model Token {
  id          Int        @id @default(autoincrement())
  token       String
  salesRepId  Int
  createdAt   DateTime   @default(now())
  expiresAt   DateTime
  blacklisted Boolean    @default(false)
  lastUsedAt  DateTime?
  tokenType   String     @default("access")
  SalesRep    SalesRep[]

  @@index([salesRepId])
  @@index([blacklisted])
  @@index([lastUsedAt])
  @@index([tokenType])
}

model Regions {
  id        Int    @id @default(autoincrement())
  name      String
  countryId Int
  status    Int?   @default(0)

  @@unique([name, countryId])
  @@index([countryId], map: "Regions_countryId_fkey")
}

model Country {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?   @default(0)

  SalesRep SalesRep[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
}

model PriceOption {
  id         Int    @id @default(autoincrement())
  option     String
  value      Int
  categoryId Int

  @@index([categoryId], map: "PriceOption_categoryId_fkey")
}

model StoreQuantity {
  id        Int @id @default(autoincrement())
  quantity  Int
  storeId   Int
  productId Int

  @@index([productId], map: "StoreQuantity_productId_fkey")
  @@index([storeId], map: "StoreQuantity_storeId_fkey")
}

model Stores {
  id          Int    @id @default(autoincrement())
  name        String
  regionId    Int?
  client_type Int?
  countryId   Int
  region_id   Int?
  status      Int    @default(0)

  @@index([regionId], map: "Stores_regionId_fkey")
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  category_id    Int
  category       String
  unit_cost      Decimal          @db.Decimal(11, 2)
  description    String?
  currentStock   Int?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  clientId       Int?
  image          String?          @default("")
  UpliftSaleItem UpliftSaleItem[]

  @@index([clientId], map: "Product_clientId_fkey")
}

model TransferHistory {
  id            Int      @id @default(autoincrement())
  productId     Int
  fromStoreId   Int
  toStoreId     Int
  quantity      Int
  transferredAt DateTime @default(now())
  updatedAt     DateTime

  @@index([fromStoreId], map: "TransferHistory_fromStoreId_fkey")
  @@index([productId], map: "TransferHistory_productId_fkey")
  @@index([toStoreId], map: "TransferHistory_toStoreId_fkey")
}

model ProductDetails {
  id          Int    @id @default(autoincrement())
  productId   Int
  date        String @default("current_timestamp(3)") @db.VarChar(100)
  reference   String
  quantityIn  Int
  quantityOut Int
  newBalance  Int
  storeId     Int
  staff       Int
  staff_name  String @db.VarChar(100)
  update_date String @db.VarChar(50)

  @@index([productId], map: "ProductDetails_productId_fkey")
  @@index([storeId], map: "ProductDetails_storeId_fkey")
}

model ProductReturn {
  id                Int                 @id @default(autoincrement())
  reportId          Int                 @unique
  productName       String?
  quantity          Int?
  reason            String?
  imageUrl          String?
  status            Int                 @default(0)
  clientId          Int
  userId            Int
  staff_id          Int
  staff_name        String              @db.VarChar(100)
  client            Clients             @relation(fields: [clientId], references: [id])
  report            Report              @relation(fields: [reportId], references: [id])
  user              SalesRep            @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductReturnItem ProductReturnItem[]

  @@index([userId])
  @@index([clientId])
}

model ProductsSample {
  id                 Int                  @id @default(autoincrement())
  reportId           Int                  @unique
  productName        String?
  quantity           Int?
  reason             String?
  status             Int                  @default(0)
  clientId           Int
  userId             Int
  client             Clients              @relation(fields: [clientId], references: [id])
  report             Report               @relation(fields: [reportId], references: [id])
  user               SalesRep             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProductsSampleItem ProductsSampleItem[]

  @@index([userId])
  @@index([clientId])
}

model ProductReturnItem {
  id              Int           @id @default(autoincrement())
  productReturnId Int
  productName     String
  quantity        Int
  reason          String
  imageUrl        String?
  clientId        Int
  userId          Int
  client          Clients       @relation(fields: [clientId], references: [id])
  productReturn   ProductReturn @relation(fields: [productReturnId], references: [id])
  user            SalesRep      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productReturnId])
  @@index([userId])
  @@index([clientId])
}

model ProductsSampleItem {
  id               Int            @id @default(autoincrement())
  productsSampleId Int
  productName      String
  quantity         Int
  reason           String
  clientId         Int
  userId           Int
  client           Clients        @relation(fields: [clientId], references: [id])
  productsSample   ProductsSample @relation(fields: [productsSampleId], references: [id])
  user             SalesRep       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productsSampleId])
  @@index([userId])
  @@index([clientId])
}

model Purchase {
  id          Int      @id @default(autoincrement())
  storeId     Int
  date        DateTime @default(now())
  supplierId  Int
  totalAmount Int

  @@index([storeId], map: "Purchase_storeId_fkey")
  @@index([supplierId], map: "Purchase_supplierId_fkey")
}

model PurchaseItem {
  id         Int   @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Int
  price      Float

  @@index([productId], map: "PurchaseItem_productId_fkey")
  @@index([purchaseId], map: "PurchaseItem_purchaseId_fkey")
}

model PurchaseHistory {
  id               Int      @id @default(autoincrement())
  storeId          Int
  productId        Int
  previousQuantity Int
  purchaseQuantity Int
  newBalance       Int
  createdAt        DateTime @default(now())

  @@index([productId], map: "PurchaseHistory_productId_fkey")
  @@index([storeId], map: "PurchaseHistory_storeId_fkey")
}

model Clients {
  id                 Int                  @id @default(autoincrement())
  salesRepId         Int?
  name               String
  address            String?
  latitude           Float?
  longitude          Float?
  balance            Decimal?             @db.Decimal(11, 2)
  email              String?
  region_id          Int
  region             String
  route_id           Int?
  route_name         String?
  route_id_update    Int?
  route_name_update  String?              @db.VarChar(100)
  contact            String
  tax_pin            String?
  location           String?
  status             Int                  @default(0)
  client_type        Int?
  countryId          Int
  added_by           Int?
  created_at         DateTime?            @default(now())
  discountPercentage Float?               @default(0)
  UpliftSale         UpliftSale[]
  ProductReturn      ProductReturn[]
  ProductsSample     ProductsSample[]
  ProductReturnItem  ProductReturnItem[]
  ProductsSampleItem ProductsSampleItem[]

  @@index([countryId], map: "Clients_countryId_fkey")
  @@index([salesRepId], map: "Clients_salesRepId_fkey")
}

model Task {
  id           Int       @id @default(autoincrement())
  title        String
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  isCompleted  Boolean   @default(false)
  priority     String    @default("medium")
  status       String    @default("pending")
  salesRepId   Int
  assignedById Int?
  assignedBy   users?    @relation(fields: [assignedById], references: [id])
  salesRep     SalesRep  @relation(fields: [salesRepId], references: [id], onDelete: Cascade)

  @@index([assignedById])
  @@index([salesRepId], map: "tasks_salesRepId_fkey")
}

model ClientPayment {
  id       Int      @id @default(autoincrement())
  clientId Int
  amount   Float
  imageUrl String?
  date     DateTime @default(now())
  status   String?
  method   String?
  userId   Int

  @@index([clientId], map: "ClientPayment_clientId_fkey")
  @@index([userId], map: "ClientPayment_userId_fkey")
}

model Riders {
  id            Int     @id @default(autoincrement())
  name          String
  contact       String
  id_number     String
  company_id    Int
  company       String
  status        Int?
  password      String?
  device_id     String?
  device_name   String?
  device_status String?
  token         String?
}

model RidersCompany {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?
}

model ManagerCheckin {
  id                Int       @id @default(autoincrement())
  managerId         Int
  clientId          Int
  date              DateTime
  checkInAt         DateTime?
  checkOutAt        DateTime?
  latitude          Float?
  longitude         Float?
  notes             String?
  checkoutLatitude  Float?
  checkoutLongitude Float?
  imageUrl          String?
  status            String?
  timezone          String?
  visitDuration     Int?
  visitNumber       Int?

  @@index([managerId])
  @@index([clientId])
}

model OrderItem {
  id            Int  @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  priceOptionId Int?

  @@unique([orderId, productId, priceOptionId])
  @@index([orderId])
  @@index([priceOptionId])
  @@index([productId], map: "OrderItem_productId_fkey")
}

model MyOrder {
  id                   Int      @id @default(autoincrement())
  totalAmount          Float
  amountPaid           Decimal  @db.Decimal(11, 2)
  balance              Decimal  @db.Decimal(11, 2)
  comment              String
  customerType         String
  customerId           String
  customerName         String
  orderDate            DateTime @default(now())
  riderId              Int?
  riderName            String?
  status               Int      @default(0)
  approvedTime         String?
  dispatchTime         String?
  deliveryLocation     String?
  complete_latitude    String?
  complete_longitude   String?
  complete_address     String?
  pickupTime           String?
  deliveryTime         String?
  cancel_reason        String?
  recepient            String?
  userId               Int
  clientId             Int
  countryId            Int
  regionId             Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  approved_by          String   @db.VarChar(200)
  approved_by_name     String   @db.VarChar(200)
  storeId              Int?
  retail_manager       Int
  key_channel_manager  Int
  distribution_manager Int
  imageUrl             String?

  @@index([userId])
  @@index([clientId])
}

model JourneyPlan {
  id                 Int       @id @default(autoincrement())
  date               DateTime
  time               String
  userId             Int?
  clientId           Int
  status             Int       @default(0)
  checkInTime        DateTime?
  latitude           Float?
  longitude          Float?
  imageUrl           String?
  notes              String?
  checkoutLatitude   Float?
  checkoutLongitude  Float?
  checkoutTime       DateTime?
  showUpdateLocation Boolean   @default(true)
  routeId            Int?

  @@index([clientId])
  @@index([userId])
  @@index([routeId], map: "JourneyPlan_routeId_fkey")
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  countryId Int?
}

model Report {
  id             Int              @id @default(autoincrement())
  orderId        Int?
  clientId       Int
  createdAt      DateTime         @default(now())
  userId         Int
  journeyPlanId  Int?
  type           ReportType
  SalesRep       SalesRep[]
  ProductReturn  ProductReturn[]
  ProductsSample ProductsSample[]

  @@index([userId])
  @@index([orderId])
  @@index([clientId])
  @@index([journeyPlanId])
}

model FeedbackReport {
  reportId  Int      @unique
  comment   String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model ProductReport {
  reportId    Int
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  clientId    Int
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int?

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model VisibilityReport {
  reportId  Int        @unique
  comment   String?
  imageUrl  String?
  createdAt DateTime   @default(now())
  clientId  Int
  id        Int        @id @default(autoincrement())
  userId    Int
  SalesRep  SalesRep[]

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model routes {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(100)
  region       Int
  region_name  String @db.VarChar(100)
  country_id   Int
  country_name String @db.VarChar(100)
  leader_id    Int
  leader_name  String @db.VarChar(100)
  status       Int
}

model tasks {
  id           Int       @id @default(autoincrement())
  title        String
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  isCompleted  Boolean   @default(false)
  priority     String    @default("medium")
  status       String    @default("pending")
  salesRepId   Int
  assignedById Int?

  @@index([assignedById])
  @@index([salesRepId], map: "tasks_salesRepId_fkey")
}

enum ReportType {
  PRODUCT_AVAILABILITY
  VISIBILITY_ACTIVITY
  PRODUCT_SAMPLE
  PRODUCT_RETURN
  FEEDBACK
}
