generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String
}

model SalesRep {
  id                   Int      @id @default(autoincrement())
  name                 String
  email                String   @unique
  phoneNumber          String   @unique
  password             String
  countryId            Int
  country              String
  region_id            Int
  region               String
  route_id             Int
  route                String   @db.VarChar(100)
  route_id_update      Int
  route_name_update    String   @db.VarChar(100)
  visits_targets       Int
  new_clients          Int
  role                 String?  @default("SALES_REP")
  manager_type         Int
  status               Int?     @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  retail_manager       Int
  key_channel_manager  Int
  distribution_manager Int
  photoUrl             String?  @default("")
  managerId            Int?

  @@index([countryId], map: "SalesRep_countryId_fkey")
}

model LoginHistory {
  id           Int       @id @default(autoincrement())
  userId       Int
  loginAt      DateTime  @default(now())
  logoutAt     DateTime?
  isLate       Boolean?  @default(false)
  isEarly      Boolean?  @default(false)
  timezone     String?   @default("UTC")
  shiftStart   DateTime?
  shiftEnd     DateTime?
  duration     Int?
  status       String?   @default("ACTIVE")
  sessionEnd   String?
  sessionStart String?

  @@index([userId])
  @@index([loginAt])
  @@index([logoutAt])
}

model Target {
  id            Int      @id @default(autoincrement())
  salesRepId    Int
  isCurrent     Boolean  @default(false)
  targetValue   Int
  achievedValue Int      @default(0)
  achieved      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([salesRepId], map: "Target_salesRepId_fkey")
}

model Manager {
  id         Int     @id @default(autoincrement())
  userId     Int     @unique
  department String?

  @@map("managers")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String
  salesRepId  Int
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  blacklisted Boolean   @default(false)
  lastUsedAt  DateTime?
  tokenType   String    @default("access")

  @@index([salesRepId])
  @@index([blacklisted])
  @@index([lastUsedAt])
  @@index([tokenType])
}

model Regions {
  id        Int    @id @default(autoincrement())
  name      String
  countryId Int
  status    Int?   @default(0)

  @@unique([name, countryId])
  @@index([countryId], map: "Regions_countryId_fkey")
}

model Country {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?   @default(0)
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
}

model PriceOption {
  id         Int    @id @default(autoincrement())
  option     String
  value      Int
  categoryId Int

  @@index([categoryId], map: "PriceOption_categoryId_fkey")
}

model StoreQuantity {
  id        Int @id @default(autoincrement())
  quantity  Int
  storeId   Int
  productId Int

  @@index([productId], map: "StoreQuantity_productId_fkey")
  @@index([storeId], map: "StoreQuantity_storeId_fkey")
}

model Stores {
  id          Int    @id @default(autoincrement())
  name        String
  regionId    Int?
  client_type Int?
  countryId   Int
  region_id   Int?
  status      Int    @default(0)

  @@index([regionId], map: "Stores_regionId_fkey")
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  category_id  Int
  category     String
  unit_cost    Decimal  @db.Decimal(11, 2)
  description  String?
  currentStock Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  clientId     Int?
  image        String?  @default("")

  @@index([clientId], map: "Product_clientId_fkey")
}

model TransferHistory {
  id            Int      @id @default(autoincrement())
  productId     Int
  fromStoreId   Int
  toStoreId     Int
  quantity      Int
  transferredAt DateTime @default(now())
  updatedAt     DateTime

  @@index([fromStoreId], map: "TransferHistory_fromStoreId_fkey")
  @@index([productId], map: "TransferHistory_productId_fkey")
  @@index([toStoreId], map: "TransferHistory_toStoreId_fkey")
}

model ProductDetails {
  id          Int    @id @default(autoincrement())
  productId   Int
  date        String @default("current_timestamp(3)") @db.VarChar(100)
  reference   String
  quantityIn  Int
  quantityOut Int
  newBalance  Int
  storeId     Int
  staff       Int
  staff_name  String @db.VarChar(100)
  update_date String @db.VarChar(50)

  @@index([productId], map: "ProductDetails_productId_fkey")
  @@index([storeId], map: "ProductDetails_storeId_fkey")
}

model Purchase {
  id          Int      @id @default(autoincrement())
  storeId     Int
  date        DateTime @default(now())
  supplierId  Int
  totalAmount Int

  @@index([storeId], map: "Purchase_storeId_fkey")
  @@index([supplierId], map: "Purchase_supplierId_fkey")
}

model PurchaseItem {
  id         Int   @id @default(autoincrement())
  purchaseId Int
  productId  Int
  quantity   Int
  price      Float

  @@index([productId], map: "PurchaseItem_productId_fkey")
  @@index([purchaseId], map: "PurchaseItem_purchaseId_fkey")
}

model PurchaseHistory {
  id               Int      @id @default(autoincrement())
  storeId          Int
  productId        Int
  previousQuantity Int
  purchaseQuantity Int
  newBalance       Int
  createdAt        DateTime @default(now())

  @@index([productId], map: "PurchaseHistory_productId_fkey")
  @@index([storeId], map: "PurchaseHistory_storeId_fkey")
}

model Clients {
  id                 Int       @id @default(autoincrement())
  salesRepId         Int?
  name               String
  address            String?
  latitude           Float?
  longitude          Float?
  balance            Decimal?  @db.Decimal(11, 2)
  email              String?
  region_id          Int
  region             String
  route_id           Int?
  route_name         String?
  route_id_update    Int?
  route_name_update  String?   @db.VarChar(100)
  contact            String
  tax_pin            String?
  location           String?
  status             Int       @default(0)
  client_type        Int?
  countryId          Int
  added_by           Int?
  created_at         DateTime? @default(now())
  discountPercentage Float?    @default(0)

  @@index([countryId], map: "Clients_countryId_fkey")
  @@index([salesRepId], map: "Clients_salesRepId_fkey")
}

model ClientPayment {
  id       Int      @id @default(autoincrement())
  clientId Int
  amount   Float
  imageUrl String?
  date     DateTime @default(now())
  status   String?
  method   String?
  userId   Int

  @@index([clientId], map: "ClientPayment_clientId_fkey")
  @@index([userId], map: "ClientPayment_userId_fkey")
}

model Riders {
  id            Int     @id @default(autoincrement())
  name          String
  contact       String
  id_number     String
  company_id    Int
  company       String
  status        Int?
  password      String?
  device_id     String?
  device_name   String?
  device_status String?
  token         String?
}

model RidersCompany {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?
}

model ManagerCheckin {
  id                Int       @id @default(autoincrement())
  managerId         Int
  clientId          Int
  date              DateTime
  checkInAt         DateTime?
  checkOutAt        DateTime?
  latitude          Float?
  longitude         Float?
  notes             String?
  checkoutLatitude  Float?
  checkoutLongitude Float?
  imageUrl          String?
  status            String?
  timezone          String?
  visitDuration     Int?
  visitNumber       Int?

  @@index([managerId])
  @@index([clientId])
}

model OrderItem {
  id            Int  @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  priceOptionId Int?

  @@unique([orderId, productId, priceOptionId])
  @@index([orderId])
  @@index([priceOptionId])
  @@index([productId], map: "OrderItem_productId_fkey")
}

model MyOrder {
  id                   Int      @id @default(autoincrement())
  totalAmount          Float
  amountPaid           Decimal  @db.Decimal(11, 2)
  balance              Decimal  @db.Decimal(11, 2)
  comment              String
  customerType         String
  customerId           String
  customerName         String
  orderDate            DateTime @default(now())
  riderId              Int?
  riderName            String?
  status               Int      @default(0)
  approvedTime         String?
  dispatchTime         String?
  deliveryLocation     String?
  complete_latitude    String?
  complete_longitude   String?
  complete_address     String?
  pickupTime           String?
  deliveryTime         String?
  cancel_reason        String?
  recepient            String?
  userId               Int
  clientId             Int
  countryId            Int
  regionId             Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  approved_by          String   @db.VarChar(200)
  approved_by_name     String   @db.VarChar(200)
  storeId              Int?
  retail_manager       Int
  key_channel_manager  Int
  distribution_manager Int
  imageUrl             String?

  @@index([userId])
  @@index([clientId])
}

model JourneyPlan {
  id                 Int       @id @default(autoincrement())
  date               DateTime
  time               String
  userId             Int?
  clientId           Int
  status             Int       @default(0)
  checkInTime        DateTime?
  latitude           Float?
  longitude          Float?
  imageUrl           String?
  notes              String?
  checkoutLatitude   Float?
  checkoutLongitude  Float?
  checkoutTime       DateTime?
  showUpdateLocation Boolean   @default(true)
  routeId            Int?

  @@index([clientId])
  @@index([userId])
  @@index([routeId], map: "JourneyPlan_routeId_fkey")
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  countryId Int?
}

model Report {
  id            Int        @id @default(autoincrement())
  orderId       Int?
  clientId      Int
  createdAt     DateTime   @default(now())
  userId        Int
  journeyPlanId Int?
  type          ReportType

  @@index([userId])
  @@index([orderId])
  @@index([clientId])
  @@index([journeyPlanId])
}

model FeedbackReport {
  reportId  Int      @unique
  comment   String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model ProductReport {
  reportId    Int
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  clientId    Int
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int?

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model VisibilityReport {
  reportId  Int      @unique
  comment   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  clientId  Int
  id        Int      @id @default(autoincrement())
  userId    Int

  @@index([userId])
  @@index([clientId])
  @@index([reportId])
}

model ProductReturn {
  id          Int     @id @default(autoincrement())
  reportId    Int     @unique
  productName String?
  quantity    Int?
  reason      String?
  imageUrl    String?
  status      Int     @default(0)
  clientId    Int
  userId      Int
  staff_id    Int
  staff_name  String  @db.VarChar(100)

  @@index([userId])
  @@index([clientId])
}

model routes {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(100)
  region       Int
  region_name  String @db.VarChar(100)
  country_id   Int
  country_name String @db.VarChar(100)
  leader_id    Int
  leader_name  String @db.VarChar(100)
  status       Int
}

model tasks {
  id           Int       @id @default(autoincrement())
  title        String
  description  String    @db.Text
  createdAt    DateTime  @default(now())
  completedAt  DateTime?
  isCompleted  Boolean   @default(false)
  priority     String    @default("medium")
  status       String    @default("pending")
  salesRepId   Int
  assignedById Int?

  @@index([assignedById])
  @@index([salesRepId], map: "tasks_salesRepId_fkey")
}

enum ReportType {
  PRODUCT_AVAILABILITY
  VISIBILITY_ACTIVITY
  PRODUCT_SAMPLE
  PRODUCT_RETURN
  FEEDBACK
}
